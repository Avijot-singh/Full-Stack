// INTERVIEW QUESTIONS 
1. Is NodeJs single or multi threaded. Ans -  It is single threaded meaning it runs the command 1 at a time
2. Is nodeJs Sync or Async language. Ans - It is a async language, let's say we 3 to 4 functions in our file, when we run, it will run the first funtion as it is
and then maybe 2nd function as complex data, so node js wont wait for it to complete rather will run it and run other 3 and 4 functions and once 2nd is ready it will 
run it.
3. What is buffer. Ans - Tempory storage, node needs a little memory to run program
4. How is require('path') helpful: The path module helps you handle file paths easily and correctly across different operating systems.

- Node is not a Language, it uses Javascript 
- This is a Server Environment, it is advanced than Javascript
- Node js can connect with database
- Code and syntax is very similar to Javascript
- But not exactly the same
- Node js use Chrome's V8 engine to exectute code and is free, open-source

// WHY DO WE USE Node
- Node js is mostly used for API, so we can connect our JavaScript application with database etc 
- Node is easy to understand who know JavaScript
- Node is super-fast for APIs
- With Node and JavaScript, you can become a full Stack Developer

// JAVASCRIPT & NODE ARE THE SAME ?
- JavaScript and Node js Code  Syntax is Same 
- If you know JavaScript you can easily understand Node 
- But both are not exactly the same 
- You can not connect JavaScript to DB 
- Node can connect with DB 
- Node js run on the server side whereas, JavaScript run on the browser

// WHAT DEVELOPER MAKE WITH NODE JS?
- Developers make API with Node js 
- So we can connect Server with Client 
- Node can make API for web, Androif and IOS etc.
- Make can also make Website

// CORE MODULES IN NODE JS
- Some pre defined features such as maybe to call api, connect to database or print something. Example console.log, fs, Buffer, HTTP 

// PACAGE.JSON
- Keeps details, information about your project, such as what version is your project on, whats the name of it, github repository
- Packages inside your projects are managed by package.json 
- NPM -> Node Package Manager, it manages all the node packages 
- To initalzie NPM you write npm init
- If Node_modules folder is deleted accdentally, Go to teminal and simply type npm install
- Node MODULES folder should not be pushed to github as it can be a heavyload

// Nodemon 
- Package and Module is the same thing 
- Nodemon continusely runs on your project, o bascially it keeps running the files
- https://www.npmjs.com/package/nodemon
- npm i nodemon
- To use it after installaton, go to the desired file open terminal and write nodemon .\index.js

// MAKE A SIMPLE API
- We start by making a server
- Create header and API body.
- Create an API with static data
- Put data in another file.
- Response -> Send | Request -> Recieve
- Codes | 200 for sending data | 201 for creating | 404 for not found | 500 for internal server error 

// INPUT FROM COMMAND LINE
- console.log(process.argv) | when run you can enter input 
- To fetch the input | console.log(process.argv[0]) it will give you the first input

// ASYNCHRONOUS AND SYNCHRONOUS
- In Synchronous operations tasks are perfroed one at a time
- In Asynchronous, Second Task do not wait to finish the First Task

// HOW NODE JS WORKS    
- Startup: When a Node.js application starts, it initializes the event loop, which is the core of Node.js's non-blocking, asynchronous architecture.
- Node APIS Node.js provides built-in APIs (e.g., fs, http, crypto) for performing I/O operations, networking, and more. These are often implemented in C++ or C for performance.
- Garabage Collection : Memory Management: Node.js uses V8's garbage collector to manage memory and clean up unused objects. This process occurs in the background and is managed by V8.

// EXPRESS JS
- Express js is a framework inside Node js
- Assists Node
- Static pages are those that are made by developers and will only change and work on the basis of code written 
- Dynamic pages are that are not only coded but also rely on the database statistics and all

// EJS TEMPLATE engine
-  npm install ejs
- We need to use views folder by default

// MIDDLEWARES in Node.js
 What are Middlewares?
 - Middlewares are functions that have access to the request (req), response (res), and next objects in an applicationâ€™s request-response cycle.
 - They are primarily used in routing, but can also be applied globally across all routes or selectively to specific routes.
 - The "next" function is a reference to the next middleware function in the stack. It allows passing control from one middleware to the next, until the final middleware sends a response.

 Why use Middlewares? - They allow us to perform tasks like modifying the request or response objects, adding authentication checks, logging, error handling, and more.
 - Middleware functions can be used to pre-process requests before sending a response or handing over control to the next middleware or route handler.

 Types of Middlewares:
 1. **Application-Level Middleware:** Used on the app instance and executed for every incoming request or a specific route.
 2. **Router-Level Middleware:** Applied to a specific router object instead of the app instance.
 3. **Error-Handling Middleware:** Used to handle errors. These have four arguments (err, req, res, next).
 4. **Built-In Middleware:** Such as `express.json()` and `express.static()` in Express.js, provided to handle common tasks like parsing request bodies or serving static files.
 5. **Third-Party Middleware:** Middleware installed via npm, like `morgan` for logging or `helmet` for securing HTTP headers.

 